-- phpMyAdmin SQL Dump
-- version 4.9.0.1
-- https://www.phpmyadmin.net/
--
-- Host: sql308.epizy.com
-- Generation Time: Jun 01, 2020 at 10:12 AM
-- Server version: 5.6.47-87.0
-- PHP Version: 7.2.22

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `epiz_25834958_techblog`
--

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

CREATE TABLE `category` (
  `id` int(11) NOT NULL,
  `title` text NOT NULL,
  `cat_slug` varchar(255) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `category`
--

INSERT INTO `category` (`id`, `title`, `cat_slug`) VALUES
(1, 'HTML & CSS', 'html-css'),
(2, 'Javascript', 'javascript'),
(3, 'jQuery', 'jquery'),
(4, 'PHP', 'php');

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(11) NOT NULL,
  `category` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `slug` varchar(100) NOT NULL,
  `description` text NOT NULL,
  `content` text NOT NULL,
  `author` varchar(255) NOT NULL,
  `tags` text NOT NULL,
  `date` timestamp NULL DEFAULT NULL,
  `image` varchar(255) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `category`, `title`, `slug`, `description`, `content`, `author`, `tags`, `date`, `image`) VALUES
(1, 4, 'How to install PHP on Windows', 'how-to-install-php-on-windows', 'Installing PHP on your development PC allows you to safely create and test a web application without affecting the data or systems on your live website. This article describes PHP installation as a module within the Windows version of Apache 2.2. Mac and Linux users will probably have it installed already.', '<h3>Step 1: Download the files</h3>\r\n<p>Download the latest PHP 5 ZIP package from&nbsp;<a href=\"http://www.php.net/downloads.php\">www.php.net/downloads.php</a></p>\r\n<p>As always, virus scan the file and check its MD5 checksum using a tool such as&nbsp;<a href=\"http://www.slavasoft.com/fsum/\">fsum</a>.</p>\r\n<h3>Step 2: Extract the files</h3>\r\n<p>We will install the PHP files to&nbsp;<code>C:\\php</code>, so create that folder and extract the contents of the ZIP file into it.</p>\r\n<p>PHP can be installed anywhere on your system, but you will need to change the paths referenced in the following steps.</p>\r\n<h3>Step 3: Configure&nbsp;<code>php.ini</code></h3>\r\n<p>Copy&nbsp;<code>C:\\php\\php.ini-development</code>&nbsp;to&nbsp;<code>C:\\php\\php.ini</code>. There are several lines you will need to change in a text editor (use search to find the current setting). Where applicable, you will need to remove the leading semicolon to uncomment these setting.</p>\r\n<p>Define the extension directory:</p>\r\n<pre tabindex=\"0\"><code class=\"ini\">extension_dir = \"C:/php/ext\"</code></pre>\r\n<p>Enable extensions. This will depend on the libraries you want to use, but the following extensions should be suitable for the majority of applications:</p>\r\n<pre tabindex=\"0\"><code class=\"ini\">extension=curl\r\nextension=gd2\r\nextension=mbstring\r\nextension=mysql\r\nextension=pdo_mysql\r\nextension=xmlrpc\r\n</code></pre>\r\n<p>If you want to send emails using the PHP&nbsp;<code>mail()</code>&nbsp;function, enter the details of an SMTP server (your ISP&rsquo;s server should be suitable):</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<pre tabindex=\"0\"><code class=\"ini\">[mail function]\r\n; For Win32 only.\r\nSMTP = mail.myisp.com\r\nsmtp_port = 25\r\n\r\n; For Win32 only.\r\nsendmail_from = my@emailaddress.com\r\n</code></pre>\r\n<h3>Step 4: Add&nbsp;<code>C:\\php</code>&nbsp;to the path environment variable</h3>\r\n<p>To ensure Windows can find PHP, you need to change the path environment variable. Open Settings, type &lsquo;environment variables&rsquo; into the search field and open the result. Select the &ldquo;Advanced&rdquo; tab, and click the &ldquo;Environment Variables&rdquo; button.</p>\r\n<p>Scroll down the System variables list and click on &ldquo;Path&rdquo; followed by the &ldquo;Edit&rdquo; button. Click &ldquo;Edit text&rdquo; and add&nbsp;<code>;C:\\php</code>&nbsp;to the end of the Variable value line (remember the semicolon).</p>\r\n<p><img class=\"aligncenter size-full wp-image-167468\" src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2009/04/1533182495041_path.jpg\" alt=\"PHP path environment variable\" width=\"716\" height=\"695\" /></p>\r\n<p>Now click OK until you&rsquo;re out. You might need to reboot at this stage.</p>\r\n<h3>Step 5: Configure PHP as an Apache module</h3>\r\n<h3>ðŸ¤· If&nbsp;<a href=\"https://w3techs.com/technologies/details/cm-wordpress\">35% of ALL websites&nbsp;</a>are WordPress, is PHP really that dead?</h3>\r\n<div class=\"inline-roller\">\r\n<div class=\"styledRollerDoor__StyledRollerDoor-sc-16spu5e-1 jpqESm\">\r\n<div class=\"styledRollerDoor__Content-sc-16spu5e-0 fznjz\">\r\n<div id=\"article_rollerdoor_jirpuk1590975972173\" class=\"styledPromoteBox__StyledPromoteBox-sc-1lx5aae-0 gOWFaY\">\r\n<div class=\"styledBookForm__StyledBookForm-sc-12b2f31-0 gWwHuS\">\r\n<div class=\"styledBookForm__FormContainer-sc-12b2f31-2 kyRVuf\">\r\n<p class=\"p__P-j9v9zk-0 gDhSTQ\">Get \'PHP &amp; MySQL: Novice to Ninja, 6th Edition\' for free.</p>\r\n<div class=\"styledBookForm__CTAContainer-sc-12b2f31-3 cCyJhi\"><a id=\"article_rollerdoor-button\" class=\"button__Button-tmcfcj-0 ivaYFQ\" href=\"https://www.sitepoint.com/premium/books/php-mysql-novice-to-ninja-6th-edition\" type=\"outline\" data-network=\"PHP &amp; MySQL: Novice to Ninja, 6th Edition\" data-unit=\"article_rollerdoor\">Find out more</a></div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<p>Ensure Apache is not running (use&nbsp;<code>net stop Apache2.2</code>&nbsp;from the command line) and open its&nbsp;<code>confhttpd.conf</code>&nbsp;configuration file in an editor. The following lines should be changed:</p>\r\n<p>On line 239, add index.php as a default file name:</p>\r\n<pre tabindex=\"0\"><code class=\"ini\">DirectoryIndex index.php index.html\r\n</code></pre>\r\n<p>At the bottom of the file, add the following lines (change the PHP file locations if necessary):</p>\r\n<pre tabindex=\"0\"><code class=\"ini\"># PHP5 module\r\nLoadModule php5_module \"c:/php/php5apache2_2.dll\"\r\nAddType application/x-httpd-php .php\r\nPHPIniDir \"C:/php\"\r\n</code></pre>\r\n<p>Save the configuration file and test it from the command line (Start &gt; Run &gt; cmd):</p>\r\n<pre tabindex=\"0\"><code class=\"dos\">cd Apache2bin \r\nhttpd -t\r\n</code></pre>\r\n<h3>Step 6: Test a PHP file</h3>\r\n<p>Create a file named&nbsp;<code>index.php</code>&nbsp;in Apache&rsquo;s web page root (either htdocs or D:WebPages) and add this code:</p>\r\n<pre tabindex=\"0\">&nbsp;</pre>\r\n<p>Ensure Apache has started successfully, open a web browser and enter the address&nbsp;http://localhost/. If all goes well, a &ldquo;PHP version&rdquo; page should appear showing all the configuration settings.</p>', 'admin', 'admin', '2020-06-01 01:51:18', 'blur-close-up-code-computer-546819.jpg'),
(3, 4, 'How to Boost Your Server Performance with Varnish', 'how-to-boost-your-server-performance-with-varnish', 'A really effective way to speed up a website is to add some form of caching layer in front of it. If your web server doesnâ€™t have to keep generating the same web pages over and over, odds are things will be a lot faster for your site visitors. This is where Varnish comes in.\r\n\r\nAccording to our research, 5.2% of the worldâ€™s top 10,000 websites are currently using Varnish, a popular open source HTTP accelerator (also called a reverse proxy) that acts as a caching layer between a website and its visitors.', '<h2 id=\"http1\">HTTP/1</h2>\r\n<p>HTTP is a&nbsp;<em>stateless</em>&nbsp;protocol, based on a&nbsp;<em>request-response</em>&nbsp;structure, which means that the client makes requests to the server, and these requests are atomic: any single request isn&rsquo;t aware of the previous requests. (This is why we use cookies &mdash; to bridge the gap between multiple requests in one user session, for example, to be able to serve an authenticated version of the website to logged in users.)</p>\r\n<p>Transfers are typically initiated by the client &mdash; meaning the user&rsquo;s browser &mdash; and the servers usually just respond to these requests.</p>\r\n<p>We could say that the current state of HTTP is pretty &ldquo;dumb&rdquo;, or better, low-level, with lots of &ldquo;help&rdquo; that needs to be given to the browsers and to the servers on how to communicate efficiently. Changes in this arena are not that simple to introduce, with so many existing websites whose functioning depends on backward compatibility with any introduced changes. Anything being done to improve the protocol has to be done in a seamless way that won&rsquo;t disrupt the internet.</p>\r\n<p>In many ways, the current model has become a bottleneck with this strict request-response, atomic, synchronous model, and progress has mostly taken the form of hacks, spearheaded often by the industry leaders like Google, Facebook etc. The usual scenario, which is being improved on in various ways, is for the visitor to request a web page, and when their browser receives it from the server, it parses the HTML and finds other resources necessary to render the page, like CSS, images, and JavaScript. As it encounters these resource links, it stops loading everything else, and requests specified resources from the server. It doesn&rsquo;t move a millimeter until it receives this resource. Then it requests another, and so on.</p>\r\n<div><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/10/1509358979top-benchmarks.png\" alt=\"Average number of requests in the world\'s top websites\" />\r\n<p>The number of requests needed to load world&rsquo;s biggest websites is often in couple of hundreds.</p>\r\n</div>\r\n<p>This includes a lot of waiting, and a lot of round trips during which our visitor sees only a white screen or a half-rendered website. These are wasted seconds. A lot of available bandwidth is just sitting there unused during these request cycles.</p>\r\n<p><a href=\"https://www.sitepoint.com/what-is-a-cdn-and-how-does-it-work\">CDNs</a>&nbsp;can alleviate a lot of these problems, but even they are nothing but hacks.</p>\r\n<p>As Daniel Stenberg (one of the people working on HTTP/2 standardization) from Mozilla&nbsp;<a href=\"https://bagder.gitbooks.io/HTTP2-explained/content/en/part2.html\">has pointed out</a>, the first version of the protocol is having a hard time fully leveraging the capacity of the underlying transport layer, TCP.<br />Users who have been working on optimizing website loading speeds know this often requires some creativity, to put it mildly.</p>\r\n<p>Over time, internet bandwidth speeds have drastically increased, but HTTP/1.1-era infrastructure didn&rsquo;t utilize this fully. It still struggled with issues like&nbsp;<a href=\"https://en.wikipedia.org/wiki/HTTP_pipelining\">HTTP pipelining</a>&nbsp;&mdash; pushing more resources over the same TCP connection. Client-side support in browsers has been dragging the most, with Firefox and Chrome disabling it by default, or not supporting it at all, like IE, Firefox version 54+, etc.<br />This means that even small resources require opening a new TCP connection, with all the bloat that goes with it &mdash; TCP handshakes, DNS lookups, latency&hellip; And due to&nbsp;<a href=\"https://www.wikiwand.com/en/Head-of-line_blocking\">head-of-line blocking</a>, the loading of one resource results in blocking all other resources from loading.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<div><img src=\"https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2017/11/1510041715http-pipelining.png\" alt=\"HTTP pipelining\" />\r\n<p>A synchronous, non-pipelined connection vs a pipelined one, showing possible savings in load time.</p>\r\n</div>\r\n<p>Some of the optimization sorcery web developers have to resort to under the HTTP/1 model to optimize their websites include&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Implementing_image_sprites_in_CSS\">image sprites</a>, CSS and JavaScript concatenation, sharding (distributing visitors&rsquo; requests for resources over more than one domain or subdomain), and so on.</p>\r\n<p>The improvement was due, and it had to solve these issues in a seamless, backward-compatible way so as not to interrupt the workings of the existing web.</p>', 'admin', 'http,php', '2020-06-01 02:33:02', 'working-woman-person-technology-7375.jpg'),
(2, 4, 'Improving Performance Perception: On-demand Image Resizing', 'improving-performance-perception-on-demand-image-resizing', 'Weâ€™ve been building a sample application â€” a multi-image gallery blog â€” for performance benchmarking and optimizations. At this point, our application serves the same image regardless of the resolution and screen size itâ€™s being served in. In this image resizing tutorial, weâ€™ll modify it to serve a resized version depending on display size.', '<h2 id=\"objective\">Objective</h2>\r\n<p>There are two stages to this improvement.</p>\r\n<ol>\r\n<li>We need to make all images responsive wherever this might be useful. One place is the thumbnails on the home page and in the gallery pages, and another is the full-size image when an individual image is clicked in the gallery.</li>\r\n<li>We need to add resizing-logic to our app. The point is to&nbsp;<em>generate</em>&nbsp;a resized image on the fly as it&rsquo;s demanded. This will keep non-popular images from polluting our hard drive, and it&rsquo;ll make sure the popular ones are, on subsequent requests, served in optimal sizes.</li>\r\n</ol>\r\n<h2 id=\"responsiveimages\">Responsive Images?</h2>\r\n<p>As&nbsp;<a href=\"https://www.sitepoint.com/how-to-build-responsive-images-with-srcset/\">this post</a>&nbsp;explains, images in the modern web are incredibly complex. Instead of just&nbsp;<code>&lt;img src=\"mypic.jpg\"&gt;</code>&nbsp;from the olden days, we now have something crazy like this:</p>\r\n<pre class=\"  language-markup\" tabindex=\"0\"><code class=\"markup  language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(max-width: 700px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(max-width: 500px) 50vw, 10vw<span class=\"token punctuation\">\"</span></span>\r\n<span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stick-figure-narrow.png 138w, stick-figure-hd-narrow.png 138w<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(max-width: 1400px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sizes</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(max-width: 1000px) 100vw, 50vw<span class=\"token punctuation\">\"</span></span>\r\n<span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stick-figure.png 416w, stick-figure-hd.png 416w<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stick-original.png<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Human<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">&gt;</span></span>\r\n</code></pre>\r\n<p>A combination of&nbsp;<code>srcset</code>,&nbsp;<code>picture</code>&nbsp;and&nbsp;<code>sizes</code>&nbsp;is necessary in a scenario where you&rsquo;re doubtful that if you use the same image for a smaller screen size, the primary subject of the image may become too small in size. You want to display a different image (more focused on the primary subject) in a different screen size, but still want to display separate assets of the same image based on device-pixel ratio, and want to customize height and width of the image based on viewport.</p>\r\n<p>Since our images are photos and we always want them to be in their default DOM-specified position filling up the maximum of their parent container, we have no need for&nbsp;<code>picture</code>&nbsp;(which lets us define an alternative source for a different resolution or browser support &mdash; like trying to render SVG, then PNG if SVG is unsupported) or&nbsp;<code>sizes</code>&nbsp;(which lets us define which viewport portion an image should occupy). We can get away with just using&nbsp;<code>srcset</code>, which loads a different size version of the same image depending on the screen size.</p>\r\n<h2 id=\"addingsrcset\">Adding srcset</h2>\r\n<p>The first location where we encounter images is in&nbsp;<code>home-galleries-lazy-load.html.twig</code>, the partial template that renders the home screen&rsquo;s galleries list.</p>\r\n<pre class=\"  language-markup\" tabindex=\"0\"><code class=\"markup  language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>gallery__link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ url(\'gallery.single-gallery\', {id: gallery.id}) }}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ gallery.images.first|getImageUrl }}<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ gallery.name }}<span class=\"token punctuation\">\"</span></span>\r\n    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>gallery__leading-image card-img-top<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">&gt;</span></span>\r\n</code></pre>\r\n<p>We can see here that the image&rsquo;s link is fetched from a Twig filter, which can be found in the&nbsp;<code>src/Twig/ImageRendererExtension.php</code>&nbsp;file. It takes the image&rsquo;s ID and the route&rsquo;s name (defined in the annotation in&nbsp;<code>ImageController</code>&lsquo;s&nbsp;<code>serveImageAction</code>&nbsp;route) and generates a URL based on that formula:&nbsp;<code>/image/{id}/raw</code>&nbsp;-&gt; replacing&nbsp;<code>{id}</code>&nbsp;with the ID given:</p>\r\n<pre class=\"  language-php\" tabindex=\"0\"><code class=\"php  language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getImageUrl</span><span class=\"token punctuation\">(</span>Image <span class=\"token variable\">$image</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token property\">router</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">\'image.serve\'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\r\n      <span class=\"token single-quoted-string string\">\'id\'</span> <span class=\"token operator\">=</span><span class=\"token operator\">&gt;</span> <span class=\"token variable\">$image</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> RouterInterface<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ABSOLUTE_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>', 'admin', 'php', '2020-06-01 01:57:55', 'man-in-grey-sweater-holding-yellow-sticky-note-879109.jpg'),
(4, 2, 'How to Prototype a Web App with Django and Vue.js', 'how-to-prototype-a-web-app-with-django-and-vue-js', 'Wouldnâ€™t it be cool if you could prototype a custom web application thatâ€™s responsive (mobile-ready), reactive (light-speed fast), with a full-featured admin interface to manage the content â€” all in no time? Actually, using Django and Vue.js, you can! ', '<h2 id=\"1settingupadjangoproject\">1. Setting Up a Django Project</h2>\r\n<p>Very quickly, we&rsquo;ll set up a project from scratch. If you already know how to handle Django projects, you can skip this section. We&rsquo;ll assume you already have&nbsp;<a href=\"https://realpython.com/installing-python/\">Python installed</a>.</p>\r\n<p>For a more in-depth guide, see&nbsp;<a href=\"https://docs.djangoproject.com/en/dev/topics/install/\">How to install Django</a>&nbsp;on the Django documentation site.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<h3 id=\"pythonvirtualenvironment\">Python Virtual Environment</h3>\r\n<p>Let&rsquo;s open a console and create a virtual environment (see&nbsp;<a href=\"https://docs.python.org/3/tutorial/venv.html\">Virtual Environments and Packages</a>&nbsp;for more info):</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\">$ virtualenv myenvironment\r\n</code></pre>\r\n<pre class=\" language-text\" tabindex=\"0\"><code class=\"text  language-text\">Using base prefix \'c:\\\\users\\\\luzdealba\\\\appdata\\\\local\\\\programs\\\\python\\\\python37\'\r\nNew python executable in C:\\Users\\luzdealba\\Development\\myenvironment\\Scripts\\python.exe\r\nInstalling setuptools, pip, wheel &hellip;\r\ndone\r\n</code></pre>\r\n<p>Don&rsquo;t mind the paths, as these will change from system to system.</p>\r\n<p>Let&rsquo;s access and activate the virtual environment.</p>\r\n<p>On Windows:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\">$ <span class=\"token builtin class-name\">cd</span> myenvironment\r\n$ Scripts<span class=\"token punctuation\">\\</span>activate\r\n</code></pre>\r\n<div class=\"inline-roller\">\r\n<div class=\"styledRollerDoor__StyledRollerDoor-sc-16spu5e-1 jpqESm\">\r\n<div class=\"styledRollerDoor__Content-sc-16spu5e-0 fznjz\">\r\n<div id=\"article_rollerdoor_yxm4h1590978823342\" class=\"styledPromoteBox__StyledPromoteBox-sc-1lx5aae-0 gOWFaY\">\r\n<div class=\"styledBookForm__StyledBookForm-sc-12b2f31-0 gWwHuS\">\r\n<div class=\"styledBookForm__BookCoverContainer-sc-12b2f31-1 wmNXB\">\r\n<figure class=\"styledBookCover__StyledBookCover-beflyc-0 dRQRgl\"><img class=\"styledBookCover__Img-beflyc-2 hjHque\" src=\"https://d2sis3lil8ndrq.cloudfront.net/books/34dcc72f-800f-4332-ab0c-31f0c4c4aad7.png\" alt=\"\" /></figure>\r\n</div>\r\n<div class=\"styledBookForm__FormContainer-sc-12b2f31-2 kyRVuf\">\r\n<p class=\"p__P-j9v9zk-0 cKeNIC\">ðŸ¤· If&nbsp;<a href=\"https://w3techs.com/technologies/details/cm-wordpress\">35% of ALL websites&nbsp;</a>are WordPress, is PHP really that dead?</p>\r\n<p class=\"p__P-j9v9zk-0 gDhSTQ\">Get \'PHP &amp; MySQL: Novice to Ninja, 6th Edition\' for free.</p>\r\n<div class=\"styledBookForm__CTAContainer-sc-12b2f31-3 cCyJhi\"><a id=\"article_rollerdoor-button\" class=\"button__Button-tmcfcj-0 ivaYFQ\" href=\"https://www.sitepoint.com/premium/books/php-mysql-novice-to-ninja-6th-edition\" type=\"outline\" data-network=\"PHP &amp; MySQL: Novice to Ninja, 6th Edition\" data-unit=\"article_rollerdoor\">Find out more</a></div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n</div>\r\n<p>On macOS and Linux:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\">$ <span class=\"token builtin class-name\">cd</span> myenvironment\r\n$ <span class=\"token builtin class-name\">source</span> bin/activate\r\n</code></pre>\r\n<h3 id=\"djangopackage\">Django Package</h3>\r\n<p>Let&rsquo;s install Django:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\"><span class=\"token punctuation\">(</span>myenvironment<span class=\"token punctuation\">)</span> $ pip <span class=\"token function\">install</span> django\r\n</code></pre>\r\n<pre class=\" language-text\" tabindex=\"0\"><code class=\"text  language-text\">Collecting django\r\n  Downloading Django-3.0.3-py3-none-any.whl (7.5 MB)\r\nCollecting sqlparse&gt;=0.2.2\r\n  Downloading sqlparse-0.3.1-py2.py3-none-any.whl (40 kB)\r\nCollecting pytz\r\n  Using cached pytz-2019.3-py2.py3-none-any.whl (509 kB)\r\nCollecting asgiref~=3.2\r\n  Downloading asgiref-3.2.3-py2.py3-none-any.whl (18 kB)\r\nInstalling collected packages: sqlparse, pytz, asgiref, django\r\nSuccessfully installed asgiref-3.2.3 django-3.0.3 pytz-2019.3 sqlparse-0.3.1\r\n</code></pre>\r\n<p>One more time, don&rsquo;t mind about program versions and file sizes as these will vary.</p>\r\n<h3 id=\"theproject\">The Project</h3>\r\n<p>Let&rsquo;s start a project called&nbsp;<code>myproject</code>:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\"><span class=\"token punctuation\">(</span>myenvironment<span class=\"token punctuation\">)</span> $ django-admin startproject myproject\r\n</code></pre>\r\n<p>Let&rsquo;s access the project:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\"><span class=\"token punctuation\">(</span>myenvironment<span class=\"token punctuation\">)</span> $ <span class=\"token builtin class-name\">cd</span> myproject\r\n</code></pre>\r\n<h3 id=\"theapp\">The App</h3>\r\n<p>Start an app called&nbsp;<code>myapp</code>:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\"><span class=\"token punctuation\">(</span>myenvironment<span class=\"token punctuation\">)</span> $ django-admin startapp myapp\r\n</code></pre>\r\n<p>And add&nbsp;<code>myapp.apps.MyappConfig</code>&nbsp;to the&nbsp;<code>INSTALLED_APPS</code>&nbsp;constant list in&nbsp;<code>myproject/settings.py</code>&nbsp;to enable the app.</p>\r\n<h2 id=\"2settingupthedatabasewithdjango\">2. Setting Up the Database with Django</h2>\r\n<p>Here we&rsquo;ll define the back-end database with Django, which we&rsquo;ll later integrate with a front-end storage with Vuex.</p>\r\n<h3 id=\"djangomodels\">Django Models</h3>\r\n<p><a href=\"https://docs.djangoproject.com/en/dev/topics/db/models/\">Models</a>&nbsp;are Django&rsquo;s way to implement an&nbsp;<a href=\"https://en.wikipedia.org/wiki/Object-relational_database\">object-relational database management system</a>&nbsp;(ORDBMS). In other words, plain text files where you can define database tables and fields, and from where these will propagate to the application layer and the DB engine.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<p>Let&rsquo;s code the following models for our app in&nbsp;<code>myapp/models.py</code>:</p>\r\n<pre class=\" language-python\" tabindex=\"0\"><code class=\"python  language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token triple-quoted-string string\">\"\"\"Table schema to store articles.\"\"\"</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\r\n    author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">\'myapp.Author\'</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\r\n    content <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    slug <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">\'\'</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\'%s\'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Author</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token triple-quoted-string string\">\"\"\"Table schema to store auhtors.\"\"\"</span>\r\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\r\n    slug <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token string\">\'\'</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\'%s\'</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>name\r\n</code></pre>\r\n<p>Notice that we implemented a&nbsp;<a href=\"https://en.wikipedia.org/wiki/Clean_URL#Slug\">URL slug</a>&nbsp;for both articles and authors.</p>\r\n<p>For more information, see&nbsp;<a href=\"https://docs.djangoproject.com/en/dev/ref/models/\">Model API reference</a>&nbsp;on the Django documentation site.</p>\r\n<h3 id=\"djangoadmin\">Django Admin</h3>\r\n<p>Before we can manage these models through the admin site, we&rsquo;ll first need to&nbsp;<a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.AdminSite.register\"><code>register</code></a>&nbsp;them so that Django makes them available to us.</p>\r\n<p>Let&rsquo;s simply edit&nbsp;<code>myapp/admin.py</code>&nbsp;so that it looks like this:</p>\r\n<pre class=\" language-python\" tabindex=\"0\"><code class=\"python  language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib <span class=\"token keyword\">import</span> admin\r\n\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\r\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Author\r\n\r\n<span class=\"token comment\"># register models to use in admin site</span>\r\nadmin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>Article<span class=\"token punctuation\">)</span>\r\nadmin<span class=\"token punctuation\">.</span>site<span class=\"token punctuation\">.</span>register<span class=\"token punctuation\">(</span>Author<span class=\"token punctuation\">)</span>\r\n</code></pre>\r\n<p>Read more about the&nbsp;<a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/\">Django admin site</a>&nbsp;on the Django documentation site.</p>', 'admin', 'dijango,javascript', '2020-06-01 02:37:32', 'fashion-art-coffee-macbook-pro-57690.jpg'),
(5, 2, 'How to Use jQueryâ€™s $.ajax() for Asynchronous HTTP Requests', 'how-to-use-jquery-s-ajax-for-asynchronous-http-requests', 'Nowadays, developers tend to move away from jQuery and its handy methods for DOM manipulation and Ajax requests that made it hugely popular. Regarding the Ajax requests, the Fetch API, or alternatively, the Axios library, are now more popular tools for performing asynchronous operations. That said, jQuery is still very much alive and powers almost 70,000 websites worldwide. This means that knowing how to use jQuery is still valuable in the day-to-day work of developers, like supporting legacy codebases or maintaining projects that use jQuery as an important dependency.', '<h2 id=\"thedajaxfunction\">The&nbsp;<code>$.ajax()</code>&nbsp;Function</h2>\r\n<p>The jQuery&nbsp;<a href=\"https://api.jquery.com/jQuery.ajax/\"><code>$.ajax()</code></a>&nbsp;function is used to perform an asynchronous HTTP request. It was added to the library a long time ago, existing since version 1.0. The&nbsp;<code>$.ajax()</code>&nbsp;function is what every function discussed in the previously mentioned article calls behind the scene using a preset configuration. The signatures of this function are shown below:</p>\r\n<pre class=\" language-javascript\" tabindex=\"0\"><code class=\"javascript  language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ajax</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n$<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>settings<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n</code></pre>\r\n<p>The&nbsp;<code>url</code>&nbsp;parameter is a string containing the URL you want to reach with the Ajax call, while&nbsp;<code>settings</code>&nbsp;is an object literal containing the configuration for the Ajax request.</p>\r\n<p>In its first form, this function performs an Ajax request using the&nbsp;<code>url</code>&nbsp;parameter and the options specified in&nbsp;<code>settings</code>. In the second form, the URL is specified in the&nbsp;<code>settings</code>&nbsp;parameter, or can be omitted, in which case the request is made to the current page.</p>\r\n<p>The list of the options accepted by this function, described in the next section, is very long, so I&rsquo;ll keep their description short. In case you want to study their meaning in depth, you can refer to the official documentation of&nbsp;<code>$.ajax()</code>.</p>\r\n<h3 id=\"thesettingsparameter\">The&nbsp;<code>settings</code>&nbsp;Parameter</h3>\r\n<p>There are a lot of different options you can specify to bend&nbsp;<code>$.ajax()</code>&nbsp;to your needs. In the list below you can find their names and their description sorted in alphabetic order:</p>\r\n<ul>\r\n<li><code>accepts</code>: The content type sent in the request header that tells the server what kind of response it will accept in return.</li>\r\n<li><code>async</code>: Set this option to&nbsp;<code>false</code>&nbsp;to perform a synchronous request.</li>\r\n<li><code>beforeSend</code>: A pre-request callback function that can be used to modify the&nbsp;<code>jqXHR</code>&nbsp;object before it is sent.</li>\r\n<li><code>cache</code>: Set this option to&nbsp;<code>false</code>&nbsp;to force requested pages not to be cached by the browser.</li>\r\n<li><code>complete</code>: A function to be called when the request finishes (after&nbsp;<code>success</code>&nbsp;and&nbsp;<code>error</code>&nbsp;callbacks are executed).</li>\r\n<li><code>contents</code>: An object that determines how the library will parse the response.</li>\r\n<li><code>contentType</code>: The content type of the data sent to the server.</li>\r\n<li><code>context</code>: An object to use as the context (<code>this</code>) of all Ajax-related callbacks.</li>\r\n<li><code>converters</code>: An object containing dataType-to-dataType converters.</li>\r\n<li><code>crossDomain</code>: Set this property to&nbsp;<code>true</code>&nbsp;to force a cross-domain request (such as JSONP) on the same domain.</li>\r\n<li><code>data</code>: The data to send to the server when performing the Ajax request.</li>\r\n<li><code>dataFilter</code>: A function to be used to handle the raw response data of XMLHttpRequest.</li>\r\n<li><code>dataType</code>: The type of data expected back from the server.</li>\r\n<li><code>error</code>: A function to be called if the request fails.</li>\r\n<li><code>global</code>: Whether to trigger global Ajax event handlers for this request.</li>\r\n<li><code>headers</code>: An object of additional headers to send to the server.</li>\r\n<li><code>ifModified</code>: Set this option to&nbsp;<code>true</code>&nbsp;if you want to force the request to be successful only if the response has changed since the last request.</li>\r\n<li><code>isLocal</code>: Set this option to&nbsp;<code>true</code>&nbsp;if you want to force jQuery to recognize the current environment as &ldquo;local&rdquo;.</li>\r\n<li><code>jsonp</code>: A string to override the callback function name in a JSONP request.</li>\r\n<li><code>jsonpCallback</code>: Specifies the callback function name for a JSONP request.</li>\r\n<li><code>mimeType</code>: A string that specifies the mime type to override the XHR mime type.</li>\r\n<li><code>password</code>: A password to be used with XMLHttpRequest in response to an HTTP access authentication request.</li>\r\n<li><code>processData</code>: Set this option to&nbsp;<code>false</code>&nbsp;if you don&rsquo;t want the data passed in to the&nbsp;<code>data</code>&nbsp;option (if not a string already) to be processed and transformed into a query string.</li>\r\n<li><code>scriptAttrs</code>: Defines an object with additional attributes to be used in a &ldquo;script&rdquo; or &ldquo;jsonp&rdquo; request.</li>\r\n<li><code>scriptCharset</code>: Sets the charset attribute on the script tag used in the request but only applies when the &ldquo;script&rdquo; transport is used.</li>\r\n<li><code>statusCode</code>: An object of numeric HTTP codes and functions to be called when the response has the corresponding code.</li>\r\n<li><code>success</code>: A function to be called if the request succeeds.</li>\r\n<li><code>timeout</code>: A number that specifies a timeout (in milliseconds) for the request.</li>\r\n<li><code>traditional</code>: Set this to&nbsp;<code>true</code>&nbsp;if you wish to use the traditional style of param serialization.</li>\r\n<li><code>type</code>: The type of request to make, which can be either &ldquo;POST&rdquo; or &ldquo;GET&rdquo;.</li>\r\n<li><code>url</code>: A string containing the URL to which the request is sent.</li>\r\n<li><code>username</code>: A username to be used with XMLHttpRequest in response to an HTTP access authentication request.</li>\r\n<li><code>xhr</code>: A callback for creating the XMLHttpRequest object.</li>\r\n<li><code>xhrFields</code>: An object to set on the native XHR object.</li>\r\n</ul>\r\n<p>That&rsquo;s a pretty long list, isn&rsquo;t it? Well, as a developer, you probably stopped reading this list at the fifth or sixth element I guess, but that&rsquo;s fine. The next section will be more exciting, because we&rsquo;ll put the&nbsp;<code>$.ajax()</code>&nbsp;function and some of these options into action.</p>', 'admin', 'How to Use jQueryâ€™s $.ajax() for Asynchronous HTTP Requests', '2020-06-01 02:41:33', 'code-coding-computer-cyberspace-270373.jpg'),
(6, 1, 'Show Me Emoji: Iconic Code Snippets', 'show-me-emoji-iconic-code-snippets', 'Emoji seems to have invaded every part of our culture. What started out as a niche feature for mobile phone users and computer geeks has become its own phenomenon. Now, we see these little characters on t-shirts, marketing campaigns and even not-so-funny feature films.\r\n\r\nIt wouldnâ€™t be a stretch to say that emoji have become a sort-of common language. Whether you speak English, Japanese or Swahili, certain characters are just universally recognized. As such, they can break down barriers in their own, cute way.\r\n\r\nNaturally, the web design community utilizes and experiments with emoji quite a bit. Today, weâ€™d like to showcase some of the more interesting and fun examples from CodePen. They run the gamut from simple CSS recreations, to clever animation that brings these little guys and gals to life. Enjoy ðŸ˜Š', '<p>Emoji seems to have invaded every part of our culture. What&nbsp;<a href=\"https://en.wikipedia.org/wiki/Emoji\" target=\"_blank\" rel=\"noopener noreferrer\">started out</a>&nbsp;as a niche feature for mobile phone users and computer geeks has become its own phenomenon. Now, we see these little characters on t-shirts, marketing campaigns and even not-so-funny&nbsp;<a href=\"https://www.imdb.com/title/tt4877122/\" target=\"_blank\" rel=\"noopener noreferrer\">feature films</a>.</p>\r\n<p>It wouldn&rsquo;t be a stretch to say that emoji have become a sort-of common language. Whether you speak English, Japanese or Swahili, certain characters are just universally recognized. As such, they can break down barriers in their own, cute way.</p>\r\n<p>Naturally, the web design community utilizes and experiments with emoji quite a bit. Today, we&rsquo;d like to showcase some of the more interesting and fun examples from CodePen. They run the gamut from simple CSS recreations, to clever animation that brings these little guys and gals to life. Enjoy ðŸ˜Š</p>', 'admin', 'css', '2020-06-01 02:45:43', 'gray-laptop-computer-showing-html-codes-in-shallow-focus-160107.jpg');
INSERT INTO `posts` (`id`, `category`, `title`, `slug`, `description`, `content`, `author`, `tags`, `date`, `image`) VALUES
(7, 1, '5 Projects to Help You Master Modern CSS', '5-projects-to-help-you-master-modern-css', 'CSS suggests layouts and styles to the browser. A browser can interpret those suggestions whichever way it chooses and, even then, the user or device can ignore or override any properties. Creating high-performance code which works well across all devices and screen resolutions is a challenge that few attempt or successfully complete. However, the rewards can be exhilarating.', '<h2 id=\"1makeasiteprinterfriendly\">1. Make a Site Printer-friendly</h2>\r\n<p>Visit a site you&rsquo;re working on and attempt to print (or print preview) a page. Are you happy with the results?</p>\r\n<p>HTML pages are a continuous medium which do not necessarily work well on printed media. Inappropriate sections, scaling, text sizes, column dimensions, and missing or cropped content all lead to an inaccessible printing experience that few developers consider.</p>\r\n<p>Fortunately, print CSS can be developed within a few hours. It&rsquo;s generally a matter of resetting styles (black on white), removing unnecessary sections (menus, hero images, forms, social media widgets, etc.), linearizing the layout, and reducing the paper and ink requirements.</p>\r\n<p>Delve into&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/2/jyqxmd9k?utm_source=blog&amp;utm_medium=articles\">Browser-based Developer Tools</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/?utm_source=blog&amp;utm_medium=articles\">CSS Master</a>) and&nbsp;<a href=\"https://www.sitepoint.com/premium/books/browser-devtool-secrets/\">Browser DevTool Secrets</a>&nbsp;to discover how to examine and modify styles after switching to print rendering.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/8/jyqxmeaa?utm_source=blog&amp;utm_medium=articles\">Applying CSS Conditionally</a>&nbsp;describes how to define&nbsp;<code>@media</code>&nbsp;query rules including&nbsp;<code>print</code>&nbsp;stylesheets.</p>\r\n<p>Consider your&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/read/4/jynr4gos?utm_source=blog&amp;utm_medium=articles\">Strategy Guide to CSS Custom Properties</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/?utm_source=blog&amp;utm_medium=articles\">New Frontiers In Web Design</a>) to determine whether CSS variables could help with printing properties. Also consider&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-animation-101/read/19/jyqr3yvo?utm_source=blog&amp;utm_medium=articles\">Accessibility</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-animation-101/?utm_source=blog&amp;utm_medium=articles\">CSS Animation 101</a>) to switch off animations or print them in the best state.</p>\r\n<p>Finally,&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-tools-skills/read/6?utm_source=blog&amp;utm_medium=articles\">How to Create Printer-friendly Pages with CSS</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-tools-skills/?utm_source=blog&amp;utm_medium=articles\">CSS Tools &amp; Skills</a>) provides a full print-optimization tutorial with tips to save ink and paper costs.</p>\r\n<h2 id=\"2applythemingtoanexistingsite\">2. Apply Theming to an Existing Site</h2>\r\n<p>A single color scheme is boring! Everyone expects a dark mode option in their OS and applications, so why not add one to your website?</p>\r\n<p>Until recently, theme switchers typically required an additional set of styles with JavaScript-powered switching controls. However, modern browsers make life easier with CSS Custom Properties (variables) and the&nbsp;<a href=\"https://developer.mozilla.org/docs/Web/CSS/@media/prefers-color-scheme\"><code>prefers-color-scheme</code></a>&nbsp;<code>@media</code>&nbsp;rule.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/read/4/jynr4gsd?utm_source=blog&amp;utm_medium=articles\">Strategies for Theming</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/?utm_source=blog&amp;utm_medium=articles\">New Frontiers In Web Design</a>) provides a range of ideas and considerations when designing your new theme.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/8/jyqxmeaa?utm_source=blog&amp;utm_medium=articles\">Applying CSS Conditionally</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/?utm_source=blog&amp;utm_medium=articles\">CSS Master</a>) describes how to define&nbsp;<code>@media</code>&nbsp;query rules including&nbsp;<code>prefers-color-scheme</code>.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<p>Finally,&nbsp;<a href=\"https://www.sitepoint.com/premium/books/modern-css/read/7/jyr01bqg?utm_source=blog&amp;utm_medium=articles\">Modern CSS: Adding a CSS Dark Theme</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/modern-css/read/?utm_source=blog&amp;utm_medium=articles\">Modern CSS</a>) provides a full dark-theme-enabling tutorial.</p>\r\n<h2 id=\"3reworkaformlayout\">3. Rework a Form Layout</h2>\r\n<p>Examine a form on your website, such as an enquiry or registration form. Unless it was coded fairly recently, it&rsquo;s likely to be implemented with container DIVs and float-based layouts which possibly break on smaller screens. Older forms may use unnecessary JavaScript or have poor accessibility.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/form-design-patterns/read/1?utm_source=blog&amp;utm_medium=articles\">A Registration Form</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/form-design-patterns/?utm_source=blog&amp;utm_medium=articles\">Form Design Patterns</a>) describes the best ways to design, style, and code a form using HTML5.</p>\r\n<p>CSS Grid allows you to eradicate unnecessary markup and make bulletproof responsive layouts without resorting to media queries. The following CSS Grid tutorials will get you up to speed:</p>\r\n<ul>\r\n<li><a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/read/3?utm_source=blog&amp;utm_medium=articles\">Production-ready CSS Grid Layouts</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/?utm_source=blog&amp;utm_medium=articles\">New Frontiers In Web Design</a>)</li>\r\n<li><a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/5/jyqxmdri?utm_source=blog&amp;utm_medium=articles\">Creating Layouts with CSS Grid</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/5/jyqxmdri?utm_source=blog&amp;utm_medium=articles\">Master CSS</a>), and</li>\r\n<li><a href=\"https://www.sitepoint.com/premium/books/jump-start-responsive-web-design-2nd-edition/read/3/jznetjjy?utm_source=blog&amp;utm_medium=articles\">CSS Grid Layout</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/jump-start-responsive-web-design-2nd-edition/?utm_source=blog&amp;utm_medium=articles\">Jump Start Responsive Web Design</a>)</li>\r\n</ul>', 'admin', 'css', '2020-06-01 02:48:28', 'semi-opened-laptop-computer-turned-on-on-table-2047905.jpg'),
(8, 1, 'Five Ways to Lazy Load Images for Better Website Performance', 'five-ways-to-lazy-load-images-for-better-website-performance', 'With images being among the most popular type of content on the web, page load time on websites can easily become an issue.\r\n\r\nEven when properly optimized, images can weigh quite a bit. This can have a negative impact on the time visitors have to wait before they can access content on your website. Chances are, they get impatient and navigate somewhere else, unless you come up with a solution to image loading that doesnâ€™t interfere with the perception of speed.\r\n\r\nIn this article, youâ€™ll learn about five approaches to lazy loading images that you can add to your web optimization toolkit to improve the user experience on your website.', '<h2 id=\"whyshouldyoucareaboutlazyloadingimages\">Why Should You Care About Lazy Loading Images?</h2>\r\n<p>There are at least a couple of excellent reasons why you should consider lazy loading images for your website:</p>\r\n<ul>\r\n<li>If your website uses JavaScript to display content or provide some kind of functionality to users, loading the DOM quickly becomes critical. It&rsquo;s common for scripts to wait until the DOM has completely loaded before they start running. On a site with a significant number of images, lazy loading &mdash; or loading images asynchronously &mdash; could make the difference between users staying or leaving your website.</li>\r\n<li>Since most lazy loading solutions work by loading images only if the user has scrolled to the location where images would be visible inside the viewport, those images will never be loaded if users never get to that point. This means considerable savings in bandwidth, for which most users, especially those accessing the Web on mobile devices and slow-connections, will be thanking you.</li>\r\n</ul>\r\n<p>Well, lazy loading images helps with website performance, but what&rsquo;s the best way to go about it?</p>\r\n<p>There&rsquo;s no perfect way.</p>\r\n<p>If you live and breathe JavaScript, implementing your own lazy loading solution shouldn&rsquo;t be an issue. Nothing gives you more control than coding something yourself.</p>\r\n<p>Alternatively, you can browse the Web for viable approaches and start experimenting with them. I did just that and came across these five interesting techniques.</p>\r\n<h2 id=\"1nativelazyloading\">#1 Native Lazy Loading</h2>\r\n<p>Native lazy loading of images and iframes is super cool. Nothing could be more straightforward than the markup below:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\"markup  language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myimage.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>content.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>iframe</span><span class=\"token punctuation\">&gt;</span></span>\r\n</code></pre>\r\n<p>As you can see, no JavaScript, no dynamic swapping of the&nbsp;<code>src</code>&nbsp;attribute&rsquo;s value, just plain old HTML.</p>\r\n<p>The&nbsp;<code>loading</code>&nbsp;attribute gives us the option to delay off-screen images and iframes until users scroll to their location on the page.&nbsp;<code>loading</code>&nbsp;can take any of these three values:</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<ul>\r\n<li><code>lazy</code>: works great for lazy loading</li>\r\n<li><code>eager</code>: instructs the browser to load the specified content right away</li>\r\n<li><code>auto</code>: leaves the option to lazy load or not to lazy load up to the browser.</li>\r\n</ul>\r\n<p>This method has no rivals: it has zero overhead, it&rsquo;s clean and simple. However, although at the time of writing most major browsers have&nbsp;<a href=\"https://caniuse.com/#feat=loading-lazy-attr\">good support for the&nbsp;<code>loading</code>&nbsp;attribute</a>, not all browsers are on board yet.</p>\r\n<p>For an in-depth article on this awesome feature for lazy-loading images, including browser support workarounds, don&rsquo;t miss Addy Osmani&rsquo;s &ldquo;<a href=\"https://addyosmani.com/blog/lazy-loading/\">Native image lazy-loading for the web!</a>&rdquo;.</p>\r\n<h2 id=\"2lazyloadingusingtheintersectionobserverapi\">#2 Lazy Loading Using the Intersection Observer API</h2>\r\n<p>The&nbsp;<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\">Intersection Observer API</a>&nbsp;is a modern interface that you can leverage for lazy loading images and other content.</p>\r\n<p>Here&rsquo;s how MDN introduces this API:</p>\r\n<blockquote>\r\n<p>The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document&rsquo;s viewport.</p>\r\n</blockquote>', 'admin', 'css', '2020-06-01 02:51:13', 'architecture-business-clean-computer-389818.jpg'),
(9, 1, 'A Basic HTML5 Template For Any Project', 'a-basic-html5-template-for-any-project', 'As you learn HTML5 and add new techniques to your toolbox, youâ€™re likely going to want to build yourself a boilerplate from which you can begin all your HTML5-based projects. We encourage this, and you may also consider using one of the many online sources that provide a basic HTML5 starting point for you.', '<h2>The Doctype</h2>\r\n<p>First, we have the Document Type Declaration, or&nbsp;<em>doctype</em>. This is simply a way to tell the browser &mdash; or any other parser &mdash; what type of document it&rsquo;s looking at. In the case of HTML files, it means the specific version and flavor of HTML. The doctype should always be the first item at the top of any HTML file. Many years ago, the doctype declaration was an ugly and hard-to-remember mess. For XHTML 1.0 Strict:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\">&nbsp;</pre>\r\n<p>And for HTML4 Transitional:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\">&nbsp;</pre>\r\n<p>Although that long string of text at the top of our documents hasn&rsquo;t really hurt us (other than forcing our sites&rsquo; viewers to download a few extra bytes), HTML5 has done away with that indecipherable eyesore. Now all you need is this:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\" language-markup\"><span class=\"token doctype\">&lt;!doctype html&gt;</span></code></pre>\r\n<p>Simple, and to the point. The doctype can be written in uppercase, lowercase, or mixed case. You&rsquo;ll notice that the &ldquo;5&rdquo; is conspicuously missing from the declaration. Although the current iteration of web markup is known as &ldquo;HTML5,&rdquo; it really is just an evolution of previous HTML standards &mdash; and future specifications will simply be a development of what we have today.</p>\r\n<p>Because browsers are usually required to support all existing content on the Web, there&rsquo;s no reliance on the doctype to tell them which features should be supported in a given document. In other words, the doctype alone is not going to make your pages HTML5-compliant. It&rsquo;s really up to the browser to do this. In fact, you can use one of those two older doctypes with new HTML5 elements on the page and the page will render the same as it would if you used the new doctype.</p>\r\n<h2>The&nbsp;<code>html</code>&nbsp;Element</h2>\r\n<p>Next up in any HTML document is the&nbsp;<code>html</code>&nbsp;element, which has not changed significantly with HTML5. In our example, we&rsquo;ve included the&nbsp;<code>lang</code>&nbsp;attribute with a value of&nbsp;<code>en</code>, which specifies that the document is in English. In XHTML-based syntax, you&rsquo;d be required to include an&nbsp;<code>xmlns</code>&nbsp;attribute. In HTML5, this is no longer needed, and even the&nbsp;<code>lang</code>&nbsp;attribute is unnecessary for the document to validate or function correctly.</p>\r\n<p>So here&rsquo;s what we have so far, including the closing&nbsp;<code></code>&nbsp;tag:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\" language-markup\"><span class=\"token doctype\">&lt;!doctype html&gt;</span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">html</span><span class=\"token punctuation\">&gt;</span></span></span></code></pre>\r\n<h2>The&nbsp;<code>head</code>&nbsp;Element</h2>\r\n<p>The next part of our page is the&nbsp;<code></code>&nbsp;section. The first line inside the&nbsp;<code>head</code>&nbsp;is the one that defines the character encoding for the document. This is another element that&rsquo;s been simplified since XHTML and HTML4, and is an optional feature, but recommended. In the past, you may have written it like this:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\" language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\r\n<p>HTML5 improves on this by reducing the character encoding&nbsp;<code></code>&nbsp;tag to the bare minimum:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\" language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></code></pre>\r\n<p>In nearly all cases,&nbsp;<code>utf-8</code>&nbsp;is the value you&rsquo;ll be using in your documents. A full explanation of character encoding is beyond the scope of this article, and it probably won&rsquo;t be that interesting to you, either. Nonetheless, if you want to delve a little deeper, you can read up on the topic on&nbsp;<a href=\"http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#encoding-terminology\">W3C</a>&nbsp;or&nbsp;<a href=\"https://html.spec.whatwg.org/multipage/infrastructure.html#encoding-terminology\">WHATWG</a>.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<p><em>Note: to ensure that all browsers read the character encoding correctly, the entire character encoding declaration must be included somewhere within the first 512 characters of your document. It should also appear before any content-based elements (like the&nbsp;<code></code>&nbsp;element that follows it in our example site)</em>.</p>\r\n<p>There&rsquo;s much more we could write about this subject, but we want to keep you awake &mdash; so we&rsquo;ll spare you those details! For now, we&rsquo;re content to accept this simplified declaration and move on to the next part of our document:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\" language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>The HTML5 Herald<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">title</span><span class=\"token punctuation\">&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>The HTML5 Herald<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SitePoint<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css/styles.css?v=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></span></code></pre>\r\n<p>In these lines, HTML5 barely differs from previous syntaxes. The page title (the only mandatory element inside the&nbsp;<code>head</code>) is declared the same as it always was, and the meta tags we&rsquo;ve included are merely optional examples to indicate where these would be placed; you could put&nbsp;<a href=\"https://html.spec.whatwg.org/multipage/semantics.html#the-meta-element\">as many valid&nbsp;<code>meta</code>&nbsp;elements</a>&nbsp;here as you like.</p>\r\n<p>The key part of this chunk of markup is the stylesheet, which is included using the customary&nbsp;<code>link</code>&nbsp;element. There are no required attributes for&nbsp;<code>link</code>&nbsp;other than&nbsp;<code>href</code>&nbsp;and&nbsp;<code>rel</code>. The&nbsp;<code>type</code>&nbsp;attribute (which was common in older versions of HTML) is not necessary, nor was it ever needed to indicate the content type of the stylesheet.</p>', 'admin', 'admin', '2020-06-01 05:27:31', 'man-in-black-shirt-sits-behind-desk-with-computers-2102416.jpg'),
(10, 1, 'How to Create Printer-friendly Pages with CSS', 'how-to-create-printer-friendly-pages-with-css', 'Print Style Sheets\r\nPrint CSS can either be:\r\n\r\nApplied in addition to screen styling. Taking your screen styles as a base, the printer styles override those defaults as necessary.\r\nApplied as separate styles. The screen and print styles are entirely separate; both start from the browserâ€™s default styles.', '<h2 id=\"printstylesheets\">Print Style Sheets</h2>\r\n<p>Print CSS can either be:</p>\r\n<ol>\r\n<li>Applied in addition to screen styling.&nbsp;Taking your screen styles as a base, the printer styles override those defaults as necessary.</li>\r\n<li>Applied as separate styles.&nbsp;The screen and print styles are entirely separate; both start from the browser&rsquo;s default styles.</li>\r\n</ol>\r\n<p>The choice will depend on your site/app. Personally, I use screen styles as a print base most of the time. However, I have used separate style sheets for applications with radically different outputs &mdash; such as a conference session booking system which displayed a timetable grid on-screen but a chronological schedule on paper.</p>\r\n<p>A print style sheet can be added to the HTML&nbsp;<code>&lt;head&gt;</code>&nbsp;after the standard style sheet:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\"markup  language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\r\n</code></pre>\r\n<p>The&nbsp;<code>print.css</code>&nbsp;styles will be applied in&nbsp;addition&nbsp;to screen styles when the page is printed.</p>\r\n<p>To separate screen and print media,&nbsp;<code>main.css</code>&nbsp;should target the screen only:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\"markup  language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>screen<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>main.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span>\r\n</code></pre>\r\n<p>Alternatively, print styles can be included within an existing CSS file using&nbsp;<code>@media</code>&nbsp;rules. For example:</p>\r\n<pre class=\" language-css\" tabindex=\"0\"><code class=\"css  language-css\"><span class=\"token comment\">/* main.css */</span>\r\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\r\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\r\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">/* override styles when printing */</span>\r\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> print</span> <span class=\"token punctuation\">{</span>\r\n\r\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\r\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\r\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre>\r\n<p>Any number of&nbsp;<code>@media print</code>&nbsp;rules can be added, so this may be practical for keeping associated styles together. Screen and print rules can also be separated if necessary:</p>\r\n<pre class=\" language-css\" tabindex=\"0\"><code class=\"css  language-css\"><span class=\"token comment\">/* main.css */</span>\r\n\r\n<span class=\"token comment\">/* on-screen styles */</span>\r\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen</span> <span class=\"token punctuation\">{</span>\r\n\r\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span>\r\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\r\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">/* print styles */</span>\r\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> print</span> <span class=\"token punctuation\">{</span>\r\n\r\n  <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\r\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span>\r\n    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre>\r\n<h2 id=\"testingprinteroutput\">Testing Printer Output</h2>\r\n<p>It&rsquo;s not necessary to kill trees and use outrageously expensive ink every time you want to test your print layout! The following options replicate print styles on-screen.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<h3 id=\"printpreview\">Print Preview</h3>\r\n<p>The most reliable option is the print preview option in your browser. This shows how page breaks will be handled using your default paper size.</p>\r\n<p>Alternatively, you may be able to save or preview the page by exporting to a PDF.</p>', 'admin', 'css', '2020-06-01 03:52:55', 'person-with-body-painting-1209843.jpg'),
(11, 1, 'Understanding and Using rem Units in CSS', 'understanding-and-using-rem-units-in-css', 'CSS units have been the subject of several articles here on SitePoint (such as A Look at Length Units in CSS, The New CSS3 Relative Font Sizing Units, and The Power of em Units in CSS). In this article, we increase the count by having an in-depth look at rem units, which have excellent browser support and a polyfill if you need support for old IE.', '<p>CSS units have been the subject of several articles here on SitePoint (such as&nbsp;<a href=\"http://www.sitepoint.com/look-at-length-units-in-css/\">A Look at Length Units in CSS</a>,&nbsp;<a href=\"http://www.sitepoint.com/new-css3-relative-font-size/\">The New CSS3 Relative Font Sizing Units</a>, and&nbsp;<a href=\"http://www.sitepoint.com/power-em-units-css/\">The Power of em Units in CSS</a>). In this article, we increase the count by having an in-depth look at&nbsp;rem units, which have&nbsp;<a href=\"http://caniuse.com/#feat=rem\">excellent browser support</a>&nbsp;and&nbsp;<a href=\"http://chuckcarpenter.github.io/REM-unit-polyfill/\">a polyfill</a>&nbsp;if you need support for old IE.</p>\r\n<p><em>This article was updated in December, 2019 to reflect the current state of rem unit sizing with CSS. For more on CSS font and text properties, read our book,&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition?utm_source=blog&amp;utm_medium=articles\">CSS Master, 2nd Edition</a>.</em></p>\r\n<h2 id=\"what-are-rem-units\">What Are rem Units?</h2>\r\n<p>You might have encountered the term &ldquo;R.E.M.&rdquo; before while listening to the radio or your music player. Unlike their musical counterparts, named for the &ldquo;Rapid Eye Movement&rdquo; during deep sleep, in CSS rem stands for &ldquo;root em&rdquo;. They won&rsquo;t make you lose your religion nor believe in a man on the moon. What they can do is help you achieve a harmonious and balanced design.</p>\r\n<p>According to the&nbsp;<a href=\"http://www.w3.org/TR/2013/CR-css3-values-20130730/#font-relative-lengths\">W3C spec</a>&nbsp;the definition for one rem unit is:</p>\r\n<blockquote>\r\n<p>Equal to the computed value of&nbsp;<code>font-size</code>&nbsp;on the root element. When specified on the&nbsp;<code>font-size</code>&nbsp;property of the root element, the rem units refer to the property&rsquo;s initial value.</p>\r\n</blockquote>\r\n<p>This means that&nbsp;<code>1rem</code>&nbsp;equals the font size of the&nbsp;<code>html</code>&nbsp;element (which for most browsers has a default value of 16px).</p>\r\n<h2 id=\"rem-units-vs-em-units\">Rem Units vs. Em Units</h2>\r\n<p>The main problem with em units is that they are relative to the font size of their own element. As such they can cascade and cause unexpected results. Let&rsquo;s consider the following example, where we want lists to have a font size of&nbsp;<code>12px</code>, in the case where the root font size is the default&nbsp;<code>16px</code>:</p>\r\n<pre class=\" language-css\" tabindex=\"0\"><code class=\" language-css\"><span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token selector\">ul</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.75em<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>If we have a list nested inside another list, the font size of the inner list will be 75% of the size of its parent (in this case&nbsp;<code>9px</code>). We can still overcome this problem by using something along these lines:</p>\r\n<pre class=\" language-css\" tabindex=\"0\"><code class=\" language-css\"><span class=\"token selector\">ul ul</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre>\r\n<p>This does the trick, however we still have to pay a lot of attention to situations where nesting gets even deeper.</p>', 'admin', 'css', '2020-06-01 03:55:52', 'person-writing-on-white-paper-3815585.jpg'),
(12, 1, 'How to Build Unique, Beautiful Websites with Tailwind CSS', 'how-to-build-unique-beautiful-websites-with-tailwind-css', 'When thinking about what CSS framework to use for a new project, options like Bootstrap and Foundation readily jump to mind. Theyâ€™re tempting to use because of their ready-to-use, pre-designed components, which developers can use with ease right away. This approach works well with relatively simple websites with a common look and feel. But as soon as we start building more complex, unique sites with specific needs, a couple of problems arise.\r\n\r\nAt some point, we need to customize certain components, create new components, and make sure the final codebase is unified and easy to maintain after the changes.\r\n', '<h2 id=\"whyusingutilityfirstframework\">Why Use a Utility-first Framework?</h2>\r\n<p>A low-level, utility-first CSS framework like Tailwind has a plenty of benefits. Let&rsquo;s explore the most significant of them:</p>\r\n<ul>\r\n<li>You have greater control over elements&rsquo; appearance. We can change and fine-tune an element&rsquo;s appearance much more easily with utility classes.</li>\r\n<li>It&rsquo;s easy to manage and maintain in large projects, because you only maintain HTML files, instead of a large CSS codebase.</li>\r\n<li>It&rsquo;s easier to build unique, custom website designs without fighting with unwanted styles.</li>\r\n<li>It&rsquo;s highly customizable and extensible, which gives us unlimited flexibility.</li>\r\n<li>It has a mobile-first approach and easy implementation of responsive design patterns.</li>\r\n<li>There&rsquo;s the ability to extract common, repetitive patterns into custom, reusable components &mdash; in most cases without writing a single line of custom CSS.</li>\r\n<li>It has self-explanatory classes. We can imagine how the styled element looks only by reading the classes.</li>\r\n</ul>\r\n<p>Finally, as Tailwind&rsquo;s creators&nbsp;<a href=\"https://github.com/tailwindcss/docs/blob/master/source/docs/utility-first.blade.md\">say</a>:</p>\r\n<blockquote>\r\n<p>it&rsquo;s just about impossible to think this is a good idea the first time you see it &mdash; you have to actually try it.</p>\r\n</blockquote>\r\n<p>So, let&rsquo;s try it!</p>\r\n<h2 id=\"gettingstartedwithtailwind\">Getting Started with Tailwind</h2>\r\n<p>To demonstrate Tailwind&rsquo;s customization features, we need to install it via npm:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> tailwindcss\r\n</code></pre>\r\n<p>The next step is to create a&nbsp;<code>styles.css</code>&nbsp;file, where we include the framework styles using the&nbsp;<code>@tailwind</code>&nbsp;directive:</p>\r\n<pre class=\" language-css\" tabindex=\"0\"><code class=\"css  language-css\"><span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> base<span class=\"token punctuation\">;</span></span>\r\n\r\n<span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> components<span class=\"token punctuation\">;</span></span>\r\n\r\n<span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> utilities<span class=\"token punctuation\">;</span></span>\r\n</code></pre>\r\n<p>After that, we run the&nbsp;<code>npx tailwind init</code>&nbsp;command, which creates a minimal&nbsp;<code>tailwind.config.js</code>&nbsp;file, where we&rsquo;ll put our customization options during the development. The generated file contains the following:</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<pre class=\" language-javascript\" tabindex=\"0\"><code class=\"javascript  language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  theme<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  variants<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre>\r\n<p>The next step is to build the styles in order to use them:</p>\r\n<pre class=\" language-bash\" tabindex=\"0\"><code class=\"bash  language-bash\">npx tailwind build styles.css -o output.css\r\n</code></pre>\r\n<p>Finally, we link the generated&nbsp;<code>output.css</code>&nbsp;file and&nbsp;<a href=\"https://fontawesome.com/\">Font Awesome</a>&nbsp;in our HTML:</p>\r\n<pre class=\" language-markup\" tabindex=\"0\"><code class=\"markup  language-markup\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>output.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.9.0/css/all.min.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\r\n</code></pre>\r\n<p>And now, we&rsquo;re ready to start creating.</p>\r\n<h2 id=\"buildingaonepagewebsitetemplate\">Building a One-page Website Template</h2>\r\n<p>In the rest of the tutorial, we&rsquo;ll build a one-page website template using the power and flexibility of Tailwind&rsquo;s utility classes.</p>\r\n<p><a href=\"https://codeknack.github.io/tailwind-template/\">Here you can see the template in action</a>.</p>\r\n<p>I&rsquo;m not going to explain every single utility (which would be boring and tiresome) so I suggest you to use the&nbsp;<a href=\"https://nerdcave.com/tailwind-cheat-sheet\">Tailwind cheatsheet</a>&nbsp;as a quick reference. It contains all available utilities with their effect, plus direct links to the documentation.</p>', 'admin', 'admin', '2020-06-01 05:29:13', 'macbook-pro-on-brown-wooden-table-3815750.jpg');
INSERT INTO `posts` (`id`, `category`, `title`, `slug`, `description`, `content`, `author`, `tags`, `date`, `image`) VALUES
(13, 1, 'How to Apply CSS3 Transforms to Background Images', 'how-to-apply-css3-transforms-to-background-images', 'CSS transformations are great, but they donâ€™t (yet?) apply to background images. This article presents a workaround for those times when you really do want to rotate a background image, or to keep a background image fixed while its container element is rotated.', '<h2 id=\"1makeasiteprinterfriendly\">1. Make a Site Printer-friendly</h2>\r\n<p>Visit a site you&rsquo;re working on and attempt to print (or print preview) a page. Are you happy with the results?</p>\r\n<p>HTML pages are a continuous medium which do not necessarily work well on printed media. Inappropriate sections, scaling, text sizes, column dimensions, and missing or cropped content all lead to an inaccessible printing experience that few developers consider.</p>\r\n<p>Fortunately, print CSS can be developed within a few hours. It&rsquo;s generally a matter of resetting styles (black on white), removing unnecessary sections (menus, hero images, forms, social media widgets, etc.), linearizing the layout, and reducing the paper and ink requirements.</p>\r\n<p>Delve into&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/2/jyqxmd9k?utm_source=blog&amp;utm_medium=articles\">Browser-based Developer Tools</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/?utm_source=blog&amp;utm_medium=articles\">CSS Master</a>) and&nbsp;<a href=\"https://www.sitepoint.com/premium/books/browser-devtool-secrets/\">Browser DevTool Secrets</a>&nbsp;to discover how to examine and modify styles after switching to print rendering.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/8/jyqxmeaa?utm_source=blog&amp;utm_medium=articles\">Applying CSS Conditionally</a>&nbsp;describes how to define&nbsp;<code>@media</code>&nbsp;query rules including&nbsp;<code>print</code>&nbsp;stylesheets.</p>\r\n<p>Consider your&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/read/4/jynr4gos?utm_source=blog&amp;utm_medium=articles\">Strategy Guide to CSS Custom Properties</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/?utm_source=blog&amp;utm_medium=articles\">New Frontiers In Web Design</a>) to determine whether CSS variables could help with printing properties. Also consider&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-animation-101/read/19/jyqr3yvo?utm_source=blog&amp;utm_medium=articles\">Accessibility</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-animation-101/?utm_source=blog&amp;utm_medium=articles\">CSS Animation 101</a>) to switch off animations or print them in the best state.</p>\r\n<p>Finally,&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-tools-skills/read/6?utm_source=blog&amp;utm_medium=articles\">How to Create Printer-friendly Pages with CSS</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-tools-skills/?utm_source=blog&amp;utm_medium=articles\">CSS Tools &amp; Skills</a>) provides a full print-optimization tutorial with tips to save ink and paper costs.</p>\r\n<h2 id=\"2applythemingtoanexistingsite\">2. Apply Theming to an Existing Site</h2>\r\n<p>A single color scheme is boring! Everyone expects a dark mode option in their OS and applications, so why not add one to your website?</p>\r\n<p>Until recently, theme switchers typically required an additional set of styles with JavaScript-powered switching controls. However, modern browsers make life easier with CSS Custom Properties (variables) and the&nbsp;<a href=\"https://developer.mozilla.org/docs/Web/CSS/@media/prefers-color-scheme\"><code>prefers-color-scheme</code></a>&nbsp;<code>@media</code>&nbsp;rule.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/read/4/jynr4gsd?utm_source=blog&amp;utm_medium=articles\">Strategies for Theming</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/smashing-book-6-new-frontiers-in-web-design/?utm_source=blog&amp;utm_medium=articles\">New Frontiers In Web Design</a>) provides a range of ideas and considerations when designing your new theme.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/read/8/jyqxmeaa?utm_source=blog&amp;utm_medium=articles\">Applying CSS Conditionally</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/css-master-2nd-edition/?utm_source=blog&amp;utm_medium=articles\">CSS Master</a>) describes how to define&nbsp;<code>@media</code>&nbsp;query rules including&nbsp;<code>prefers-color-scheme</code>.</p>\r\n<div class=\"proper-ad-unit\">&nbsp;</div>\r\n<p>&nbsp;</p>\r\n<p>Finally,&nbsp;<a href=\"https://www.sitepoint.com/premium/books/modern-css/read/7/jyr01bqg?utm_source=blog&amp;utm_medium=articles\">Modern CSS: Adding a CSS Dark Theme</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/modern-css/read/?utm_source=blog&amp;utm_medium=articles\">Modern CSS</a>) provides a full dark-theme-enabling tutorial.</p>\r\n<h2 id=\"3reworkaformlayout\">3. Rework a Form Layout</h2>\r\n<p>Examine a form on your website, such as an enquiry or registration form. Unless it was coded fairly recently, it&rsquo;s likely to be implemented with container DIVs and float-based layouts which possibly break on smaller screens. Older forms may use unnecessary JavaScript or have poor accessibility.</p>\r\n<p><a href=\"https://www.sitepoint.com/premium/books/form-design-patterns/read/1?utm_source=blog&amp;utm_medium=articles\">A Registration Form</a>&nbsp;(from&nbsp;<a href=\"https://www.sitepoint.com/premium/books/form-design-patterns/?utm_source=blog&amp;utm_medium=articles\">Form Design Patterns</a>) describes the best ways to design, style, and code a form using HTML5.</p>\r\n<p>CSS Grid allows you to eradicate unnecessary markup and make bulletproof responsive layouts without resorting to media queries. The following CSS Grid tutorials will get you up to speed:</p>', 'admin', 'css', '2020-06-01 05:24:03', 'person-using-tablet-computer-with-keyboard-3815584.jpg');

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

CREATE TABLE `user` (
  `id` int(100) NOT NULL,
  `username` varchar(100) NOT NULL,
  `email` varchar(100) NOT NULL,
  `password` varchar(100) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=latin1;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`id`, `username`, `email`, `password`) VALUES
(7, 'admin', 'admin@gmail.com', '$2y$10$eI9q2VKe6ARXBaidpqQod.81pXUeJXPtGXh/FtqxW8WnJUlV4cbmC');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `category`
--
ALTER TABLE `category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=14;

--
-- AUTO_INCREMENT for table `user`
--
ALTER TABLE `user`
  MODIFY `id` int(100) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=17;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
